"""MyST-compatible drop-in replacement for Sphinx's Autosummary extension"""
__version__ = '0.2.0'


from sphinx.ext import autosummary


class Autosummary(autosummary.Autosummary):
    """Extends the `autosummary` directive provided by Autosummary."""

    def get_table(self, items):
        """
        Monkey-patches the generation of the summary table.

        All we do here is replace each of the `:py:obj:` strings
        generated by Autosummary with the MyST-style directive
        `{py:obj}` if MyST is the document parser.
        """

        # Install our parser hook.
        parsing_markdown = self.state.__module__.startswith('myst')
        if parsing_markdown:
            myst_parse = self.state.nested_parse

            def shim(block, offset, node, **arguments):
                block.replace(':py:obj:', '{py:obj}')
                myst_parse(block, offset, node, **arguments)

            self.state.nested_parse = shim

        # Let Autosummary do its thing.
        (table_spec, table) = super().get_table(items)

        # Uninstall our hook again so me don't mess with anything else.
        if parsing_markdown:
            self.state.nested_parse = myst_parse

        # Return the Autosummary table.
        return [table_spec, table]


def setup(app):
    """
    Sets up the extension.

    Sphinx calls this function if the user named this extension in
    `conf.py`. We then set up the Autosummary extension that ships
    with Sphinx and install our hook to convert Sphinx directives
    to MyST directives.
    """
    app.setup_extension('sphinx.ext.autosummary')
    app.add_directive('autosummary', Autosummary, override=True)
    return {'version': __version__, 'parallel_read_safe': True}
